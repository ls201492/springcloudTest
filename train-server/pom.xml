<?xml version="1.0"?>
<project xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd" xmlns="http://maven.apache.org/POM/4.0.0"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
  <modelVersion>4.0.0</modelVersion>
  <parent>
    <groupId>com.sctoc.microserver</groupId>
    <artifactId>train-cloud</artifactId>
    <version>0.0.1-SNAPSHOT</version>
  </parent>
  <artifactId>train-server</artifactId>
  <properties>
	 <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
	 <project.realse.directory>release</project.realse.directory>
	 <project.target.directory>target</project.target.directory>
 </properties>
	
  <dependencies>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-web</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-actuator</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.cloud</groupId>
			<artifactId>spring-cloud-starter-config</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.cloud</groupId>
			<artifactId>spring-cloud-starter-netflix-eureka-client</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.cloud</groupId>
			<artifactId>spring-cloud-starter-openfeign</artifactId>
		</dependency>
		
		
		<dependency>
			<groupId>com.github.joschi.jackson</groupId>
			<artifactId>jackson-datatype-threetenbp</artifactId>
			<version>2.6.4</version>
		</dependency>
		
		<!-- springcloud stream -->
		<dependency>
	        <groupId>org.springframework.cloud</groupId>
	        <artifactId>spring-cloud-stream</artifactId>
	    </dependency>
	    <dependency>
	        <groupId>org.springframework.cloud</groupId>
	        <artifactId>spring-cloud-starter-stream-rabbit</artifactId> 
	    </dependency>
		
	</dependencies>
	<build>
		<finalName>${artifactId}-${version}</finalName>
		<plugins>
			<!-- <plugin>
				<groupId>org.springframework.boot</groupId>
				<artifactId>spring-boot-maven-plugin</artifactId>
			</plugin>
			
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-compiler-plugin</artifactId>
				<version>3.3</version>
				<configuration>
					<source>1.8</source>
					<target>1.8</target>
					<encoding>UTF-8</encoding>
				</configuration>
			</plugin> -->
			<plugin> 
				<groupId>org.apache.maven.plugins</groupId> 
				<artifactId>maven-jar-plugin</artifactId> 
				<configuration> 
					<directory>src/main/resources</directory>
					<excludes>
						<exclude>**/application-dev.yml</exclude>
						<exclude>**/application.yml</exclude>
		            </excludes>
		            <filtering>false</filtering>
					<archive> 
						<manifest> 
							<addClasspath>true</addClasspath> 
							<classpathPrefix>lib/</classpathPrefix><!--指定classpath的前缀--> 
							<mainClass>com.sctoc.microserver.train.server.TrainServerApp</mainClass><!--指定主类的类名-->
						</manifest> 
					</archive> 
				</configuration> 
			</plugin>
			<plugin> 
				<groupId>org.apache.maven.plugins</groupId> 
				<artifactId>maven-dependency-plugin</artifactId> 
				<executions> 
					<execution> 
						<id>copy-dependencies</id> 
						<phase>prepare-package</phase> 
						<goals> 
							<goal>copy-dependencies</goal>
						 </goals> 
						 <configuration> 
						 	<!--指定outputDirectory--> 
						 	<outputDirectory>${project.build.directory}/lib</outputDirectory> 
							 <!-- <outputDirectory>${project.build.directory}/classes/lib</outputDirectory> 
							 Alternatively use ${project.build.directory}/classes/lib as OutputDirectory to integrate all jar-files into the main jar,
							  but then you will need to add custom classloading code to load the jars. --> 
					 		<overWriteReleases>false</overWriteReleases> 
					 		<overWriteSnapshots>false</overWriteSnapshots> 
					 		<overWriteIfNewer>true</overWriteIfNewer> 
					 	</configuration> 
				 	</execution> 
				 </executions> 
			</plugin>
			
			<plugin>
				<artifactId>maven-resources-plugin</artifactId>
				<version>2.5</version>
				<executions>
					<execution>
						<id>copy-resources</id>
						<phase>validate</phase>
						<goals>
							<goal>copy-resources</goal>
						</goals>
						<configuration>
							<outputDirectory>${project.build.directory}/config</outputDirectory>
							<resources>
								<resource>
									<directory>${basedir}/src/main/resources</directory>
									<includes>  
										<include>**/application-dev.yml</include>
										<include>**/application.yml</include>
	                                </includes>  
									<filtering>true</filtering>
								</resource>
							</resources>
						</configuration>
					</execution>
				</executions>
			</plugin>
		</plugins>
		
	</build>
</project>
